@using Lifestoned.DataModel.Shared
@using Lifestoned.DataModel.Gdle
@model List<EmoteCategoryListing>


<div class="panel-heading"><h3 class="panel-title">Emote Table</h3></div>
<div class="panel-body panel-group">

    @for (int k = 0; k < (Model?.Count ?? 0); k++)
    {
        var categoryListing = Model[k];
        var category = (EmoteCategory)categoryListing.EmoteCategoryId;


        <div class="panel panel-default">
            <div class="panel-heading">
                <a data-toggle="collapse" href="#@(Html.Raw("emoteCategory_" + k))">@Html.Label("Emotes for Category: " + category.GetName())</a>
                @Html.HiddenFor(m => m[k].EmoteCategoryId)
            </div>

            <div id="@(Html.Raw("emoteCategory_" + k))" class="panel-collapse collapse">

                @for (int i = 0; i < categoryListing?.Emotes?.Count; i++)
                {
                    <div class="panel-default panel-body">
                        <div class="row-spacer clearfix">
                            @Html.HiddenFor(m => m[k].Emotes[i].Category)
                            @Html.HiddenFor(m => m[k].Emotes[i].Deleted)
                            <div class="col-md-3">
                                @Html.LabelFor(m => m[k].Emotes[i].Probability)
                            </div>
                            <div class="col-md-3">
                                @Html.TextBoxFor(m => m[k].Emotes[i].Probability, new { @class = "form-control" })
                            </div>
                            <div class="col-md-3">

                            </div>
                            <div class="col-md-3">
                                <input type="button" class="btn btn-xs btn-danger" name="removeEmoteSet" value="Remove Emote" />
                            </div>
                        </div>

                        @if (Emote.IsPropertyVisible("Style", Model[k].Emotes[i]))
                        {
                            <div class="row row-spacer">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m[k].Emotes[i].Style)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m[k].Emotes[i].Style, new { @class = "form-control" })
                                </div>
                            </div>
                        }

                        @if (Emote.IsPropertyVisible("Quest", Model[k].Emotes[i]))
                        {
                            <div class="row row-spacer">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m[k].Emotes[i].Quest)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m[k].Emotes[i].Quest, new { @class = "form-control" })
                                </div>
                            </div>
                        }

                        @if (Emote.IsPropertyVisible("SubStyle", Model[k].Emotes[i]))
                        {
                            <div class="row row-spacer">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m[k].Emotes[i].SubStyle)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m[k].Emotes[i].SubStyle, new { @class = "form-control" })
                                </div>
                            </div>
                        }

                        @if (Emote.IsPropertyVisible("ClassId", Model[k].Emotes[i]))
                        {
                            <div class="row row-spacer">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m[k].Emotes[i].ClassId)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m[k].Emotes[i].ClassId, new { @class = "form-control weenieClassEntry weenie-select" })
                                </div>
                            </div>
                        }

                        @if (Emote.IsPropertyVisible("MaxHealth", Model[k].Emotes[i]))
                        {
                            <div class="row row-spacer">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m[k].Emotes[i].MaxHealth)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m[k].Emotes[i].MaxHealth, new { @class = "form-control" })
                                </div>
                            </div>
                        }

                        @if (Emote.IsPropertyVisible("MinHealth", Model[k].Emotes[i]))
                        {
                            <div class="row row-spacer">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m[k].Emotes[i].MinHealth)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m[k].Emotes[i].MinHealth, new { @class = "form-control" })
                                </div>
                            </div>
                        }

                        @if (Emote.IsPropertyVisible("VendorType", Model[k].Emotes[i]))
                        {
                            <div class="row row-spacer">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m[k].Emotes[i].VendorType)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m[k].Emotes[i].VendorType, new { @class = "form-control" })
                                </div>
                            </div>
                        }

                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <a data-toggle="collapse" href="#@(Html.Raw("emoteCategory_" + k + "_" + i))">@Html.Label("Emotes")</a>
                            </div>
                            <div id="@(Html.Raw("emoteCategory_" + k + "_" + i))" class="panel-collapse collapse">
                                <div class="panel-body panel-group">
                                    @Html.EditorFor(m => m[k].Emotes[i].Actions, "EmoteActionList")

                                    @*<div class="row row-spacer">
                                        <div class="col-md-3">
                                            @Html.Label("Add new Emote")
                                        </div>
                                        <div class="col-md-3">
                                            @Html.EnumDropDownListFor(m => m[k].NewEmoteType, new { @class = "form-control" })
                                        </div>
                                        <div class="col-md-3">
                                            <input type="button" class="btn btn-primary" id="addEmote" name="addEmote" value="Add" formaction="Edit" data-content="@(i)" data-container="@(category)" formnovalidate="formnovalidate" />
                                        </div>
                                    </div>*@
                                </div>

                                @EditorHelpers.FooterCommand(
                                    $"addEmote_{k}_{i}",
                                    new { data_content = i, data_container = categoryListing.EmoteCategoryId },
                                    "Add New Emote",
                                    Html.EnumDropDownListFor(m => m[k].Emotes[i].NewEmoteType, new { @class = "form-control" })
                                )
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>