@using Lifestoned.DataModel.Gdle;
@model List<CreateItem>

<h3>Create List</h3>

@if (Model != null && Model.Count > 0)
{
    <div class="row row-spacer">
        <div class="col-md-3">@(Html.Label("Weenie"))</div>
        <div class="col-md-3">@(Html.Label("Destination"))</div>
        <div class="col-md-1">@(Html.Label("Palette"))</div>
        <div class="col-md-2">@(Html.Label("Shade"))</div>
        <div class="col-md-1">@(Html.Label("Quantity"))</div>
        <div class="col-md-1">@(Html.Label("Bonded"))</div>
        <div class="col-md-1"></div>
    </div>

    for (int i = 0; i < Model.Count(); i++)
    {
        <div class="row row-spacer">
            <div class="col-md-3">
                @Html.HiddenFor(m => m[i].Deleted)
                @Html.TextBoxFor(m => m[i].WeenieClassId, new { @class = "form-control weenieClassEntry weenie-select" })
            </div>
            <div class="col-md-3">
                @Html.EnumDropDownListFor(m => m[i].Destination_Binder, new { @class = "form-control" })
            </div>
            <div class="col-md-1">
                @Html.TextBoxFor(m => m[i].Palette, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                @Html.TextBoxFor(m => m[i].Shade, new { @class = "form-control" })
            </div>
            <div class="col-md-1">
                @Html.TextBoxFor(m => m[i].StackSize, new { @class = "form-control" })
            </div>
            <div class="col-md-1">
                @Html.CheckBoxFor(m => m[i].TryToBond_BooleanBinder, new { @class = "form-control" })
            </div>
            <div class="col-md-1">
                <input type="button" class="btn btn-xs btn-danger" name="removeCreateItem" value="Remove" />
            </div>
        </div>
    }
}